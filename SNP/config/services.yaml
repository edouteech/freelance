# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    logo_directory: '/public/img/logos'
    avatar_directory: '/public/img/avatars'
    certificate_directory: '/private/certificates'
    fee_directory: '/private/fees'
    cms_directory: '/public/cms/uploads'
    formation_directory: '/private/formation'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Service\CaciService:
        class: App\Service\CaciService
        public: true

    Combodo\DoctrineEncryptBundle\Services\Encryptor : '@combodo_doctrine_encrypt.encryptor'

    monolog.formatter.user_request:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "[%%datetime%%] [%%extra.username%%] [%%extra.method%%] [%%extra.path%%] %%channel%% %%level_name%%: %%message%%\n"

    App\Logger\UserRequestProcessor:
        tags:
            - { name: monolog.processor }

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\Factory\NormalizerFactory:
        arguments: [!tagged serializer.normalizer]
        public: true

    App\Action\ConvertAction:
        public: true
        tags:
            - { name: payum.action, factory: monetico }

    App\Service\CurlClient:
        shared: false

    App\Service\RefreshTokenService:
        arguments: [ "@gesdinet.jwtrefreshtoken.refresh_token_manager", "%gesdinet_jwt_refresh_token.ttl%", "@validator", "@request_stack", "%gesdinet_jwt_refresh_token.user_identity_field%", "%gesdinet_jwt_refresh_token.token_parameter_name%", "%gesdinet_jwt_refresh_token.single_use%", "@gesdinet.jwtrefreshtoken.authenticator", '@gesdinet.jwtrefreshtoken.user_provider']
        public: true
        shared: false

    App\Service\Mailer:
        tags:
            - { name: monolog.logger, channel: mail }

    app.jwt_token_authenticator:
        parent: lexik_jwt_authentication.security.guard.jwt_token_authenticator
        arguments: ['@security.firewall.map']
        autowire: true
        autoconfigure: false

    app.event.jwt_listener:
        class: App\EventListener\JWTListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_invalid, method: onJWTInvalid }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_expired, method: onJWTExpired }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }